// Styles
// name mixin after scss person
@mixin person($type: "") {
  // get Basesize in correct relation to design width
  $BS: getBaseSize($type);
  .person {
    position: relative;
    box-sizing: border-box;
    // padding: $BS * 64;
    color: $BlueDarkest;
    overflow-x: hidden;

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      span {
        display: inline-block;
        font-family: $FontFamilyMain;
        font-weight: 400;
      }
    }
    h2,
    h3,
    h4,
    h5,
    h6 {
      span {
        margin-left: $BS * 14;
      }
    }
    p {
      span {
        display: inline-block;
        font-family: $FontFamilyTitle;
        margin-right: $BS * 12;
      }
    }
    &__hashtags {
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-end;
      // text-transform: uppercase;
      // font-family: $FontFamilyTitle;
      @include bsFontSize($BS, 32);
      line-height: 110%;
      color: $Blue;
      text-shadow: $BlueDark 0 0 $BS * 6;
      margin: 0;
      margin-bottom: $BS * 32;

      li {
        color: $BlueDarkest;
        padding-left: $BS * 28;

        &:first-child {
          padding-left: 0;
          &:before {
            display: none;
          }
        }
      }
    }
    &__wrapper {
      position: relative;
      box-sizing: border-box;
      width: 100%;
      height: auto;
      min-height: 100%;
      padding: 0;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      overflow: auto;
      box-shadow: $Blue $BS * 0 $BS * 0 $BS * 6,
        $BlueDarkest $BS * 0 $BS * 0 $BS * 6;
      h1 {
        span {
          @include bsFontSize($BS, 60);
        }
      }
      h2,
      h3 {
        line-height: 100%;
        margin-bottom: $BS * 20;
        & + p {
          margin-top: 0;
          margin-bottom: $BS * 64;
        }
      }
      &:after {
        box-sizing: border-box;
        content: "";
        position: absolute;
        background: transparent;
        border-radius: 50%;
        z-index: -1;
        transform: translate(-50%, 50%);
        // border: solid $Blue $BS * 3;
        background-image: linear-gradient(
            90deg,
            transparentize($BlueDarkest, 0.5),
            transparent,
            transparentize($BlueDarkest, 0.5)
          ),
          radial-gradient(circle at center, $Blue, $BlueDarkest 100vmax);
        // background-image: radial-gradient(
        //   ellipse at center,
        //   $Blue,
        //   transparentize($BlueDarkest, 0.05)
        // );
        // background: $BlueDark;

        // left: 0;
        // top: 0;
        // width: calc(100% - #{$BS} * 32);
        // height: calc(100% - #{$BS} * 32);

        left: 0;
        top: 0;
        width: 100%;
        height: 100%;

        border-radius: 0;
        transform: translate(0, 0);
      }
    }
    &__buttonWrapper {
      display: flex;
      flex-wrap: wrap;
      // margin: 0 $BS * -64;
      .button {
        // padding: $BS * 50 $BS * 17;
        // background-color: transparent;
        text-align: center;
        margin: 0;
        color: $BlueDarkest;
        flex-grow: 1;
        &:hover {
          color: $Blue;
          background-color: transparent;
          &:after {
            background-color: transparent;
          }
        }
        &:after {
          border-left-color: transparent;
          border-top-color: transparent;
        }
      }
    }
    &__helloContainer {
      display: flex;
      flex-direction: column;
      align-content: center;
      margin-top: $BS * 20;
      label {
        flex: 1;
        position: relative;
        @include bsFontSize($BS, 8);
        line-height: 100%;
        &[for="yourEmail"] {
          margin-top: $BS * 40;
          margin-bottom: $BS * 24;
        }
        span {
          position: absolute;
          top: 0;
          left: 0;
          transform: translateY(calc(-100% - #{$BS} * 4));
        }
        &:first-of-type {
          margin-left: 0;
        }
      }
      div {
        display: flex;
        flex-direction: row;
        align-items: center;
        box-sizing: border-box;
      }
      p {
        margin: 0;
      }
      input {
        box-sizing: border-box;
        height: calc(100% - #{$BS} * 6);
        min-width: $BS * 512;
        border: none;
        padding: $BS * 16;
        appearance: none;
        outline: solid $BS * 3 $Blue;
        transition: outline 0.3s ease-out, background-color 0.3s ease-out;
        background-color: transparent;
        color: $Blue;
        font-weight: 700;
        @include bsFontSize($BS, 20);
        text-transform: uppercase;
        font-family: $FontFamilyTitle;
        transform: translateY($BS * 3);
        &:focus,
        &:hover {
          border: none;
          color: $BlueDarkest;
          background: $Blue;
        }
        &.error {
          outline: solid $BS * 3 $Violet;
        }
      }
    }
    .button {
      margin-bottom: 0;
      margin-left: 0;
      border: solid $BS * 3 $Blue;
      background-color: $Blue;
      color: $BlueDarkest;
      &:hover {
        color: $Blue;
      }
    }
    &__helloWrapper {
      box-sizing: border-box;
      position: relative;
      display: flex;
      flex-direction: column;
      align-content: center;
      justify-content: center;
      padding: $BS * 64;
      background-color: transparentize($BlueDarkest, 0.5);
      color: $Blue;
      width: 50%;
    }
    &__upperWrapper {
      position: relative;
      display: flex;
      // justify-content: center;
      height: 100%;
      flex-grow: 1;
    }

    &__infoWrapper {
      width: 50%;
      padding: $BS * 64;
      display: flex;
      flex-direction: column;
      justify-content: center;
      box-sizing: border-box;
      text-align: right;
    }

    &__contactButtonWrapper {
      margin-bottom: $BS * 64;
    }
  }
}

// Add person
@include person();
// Add basic person with breakpoints
@each $Breakpoint in $Breakpoints {
  @include breakpoint(#{$Breakpoint}) {
    @include person(#{$Breakpoint});
  }
}

@include breakPointM() {
  $BS: getBaseSize("M");
  .person {
    padding: 0;
    &__helloWrapper {
      width: 100%;
      padding: $BS * 128;
      background-color: $BlueDarkest;
      h2 {
        margin-bottom: $BS * 32;
      }
    }
    &__helloContainer {
      justify-content: flex-start;
      margin-top: $BS * 0;
      div {
        &:first-child {
          width: 100%;
          margin-bottom: $BS * 40;
        }
      }
      .button {
        text-align: center;
        margin-left: 0;
        margin-top: $BS * 32;
      }
      label {
        &:first-of-type {
          margin-left: 0;
        }
        &:last-of-type {
          margin-right: 0;
        }
        span {
          left: 0;
        }
      }
      input {
        padding: $BS * 16;
      }
    }

    &__infoWrapper {
      display: block;
      width: 100%;
      padding: $BS * 128;
      text-align: left;
    }

    &__helloWrapper {
      display: block;
    }

    &__hashtags {
      justify-content: flex-start;
    }

    &__upperWrapper {
      display: block;
      height: auto;
    }

    &:after {
      // width: 100%;
      // height: 100%;
    }
  }
}

@include breakPointS() {
  $BS: getBaseSize("S");
  .person {
    &__wrapper {
      padding-bottom: 0;
    }
    &__helloWrapper {
      // margin-left: $BS * -92;
      // margin-right: $BS * -92;
      // padding-left: $BS * 92;
      // padding-right: $BS * 92;
    }
    &__helloContainer {
      flex-direction: column;

      .button {
        width: auto;
      }
    }
    &__buttonWrapper {
      display: flex;
      flex-wrap: wrap;
    }
    label {
      margin: $BS * 48 0 $BS * 16;
      width: 100%;
    }
    .button {
      display: inline-block;
      &:nth-child(even) {
        margin-right: 0;
      }
    }
  }
}
